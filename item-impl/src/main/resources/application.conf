#
# Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>
#


# This usually defaults to 10s, but for the purposes of a sample app, with only one Cassandra node, 1s is much better.
cassandra-query-journal.eventual-consistency-delay = 1s

play.application.loader = com.example.auction.item.impl.ItemApplicationLoader

akka.actor.enable-additional-serialization-bindings = on

item.cassandra.keyspace = item

cassandra-journal.keyspace = ${item.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${item.cassandra.keyspace}
lagom.persistence.read-side.cassandra.keyspace = ${item.cassandra.keyspace}

# Enable the serializer provided in Akka 2.5.8+ for akka.Done and other internal
# messages to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done"                 = akka-misc
  "akka.actor.Address"        = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
}

play.http.secret.key=whatever
play.http.secret.key=${?APPLICATION_SECRET}

akka.cluster {
  # Defines how the coordinator stores its state. Same is also used by the
  # shards for rememberEntities.
  # Valid values are "ddata" or "persistence".
  sharding.state-store-mode = "ddata"
  sharding.state-store-mode = ${?AKKA_CLUSTER_SHARDING_STATE_STORE_MODE}

  roles = [${?AKKA_CLUSTER_ROLE}]
}

lagom {
  cluster {
    # The cluster node will join itself if akka.cluster.seed-nodes is not configured.
    # In dev-mode this setting will be on, otherwise the default is off. It's possible
    # to override that by defining akka.cluster.seed-nodes or set this property to off in
    # the application.conf
    join-self = ${?LAGOM_CLUSTER_JOIN_SELF}

    # Exit the JVM forcefully when the ActorSystem has been terminated after
    # removing the cluster membership (other causes of actor system termination
    # will not trigger a JVM exit).
    # This is by default off, but it should be turned on in production so the
    # process restarts.
    # The recommended value (depending on the environment) is:
    #    * development mode : off
    #    * running tests : off
    #    * production / staging  : on
    exit-jvm-when-system-terminated = on
  }

  broker.kafka {
    # The name of the Kafka server to look up out of the service locator.
    service-name = ""

    # The URLs of the Kafka brokers. Separate each URL with a comma.
    # This will be ignored if the service-name configuration is non empty.
    brokers = ${?KAFKA_BROKERS}

    # configuration used by the Lagom Kafka producer
    client.producer.role = "singleton"
    client.producer.role = ${?LAGOM_READ_SIDE_RUN_ON_ROLE}
  }

  persistence {
    # A persistent entity is passivated automatically if it does not receive
    # any messages during this timeout. Passivation is performed to reduce
    # memory consumption. Objects referenced by the entity can be garbage
    # collected after passivation. Next message will activate the entity
    # again, which will recover its state from persistent storage. Set to 0
    # to disable passivation - this should only be done when the number of
    # entities is bounded and their state, sharded across the cluster, will
    # fit in memory.
    passivate-after-idle-timeout = "1 milli"
    passivate-after-idle-timeout = ${?LAGOM_PERSISTENCE_PASSIVATE_AFTER_IDLE_TIMEOUT}

    # Specifies that the read side processors should run on cluster nodes with a specific role.
    # If the role is not specified (or empty) all nodes in the cluster are used.
    read-side.run-on-role = "singleton"
    read-side.run-on-role = ${?LAGOM_READ_SIDE_RUN_ON_ROLE}
  }
}

com.lightbend.platform-tooling {
  service-discovery.external-service-addresses {
    cas_native/http = [${?CASSANDRA_ADDRESS}]
  }
}
